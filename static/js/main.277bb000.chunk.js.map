{"version":3,"sources":["components/ActionButtons/ActionButtons.tsx","Types.ts","components/MetricCell/MetricCell.tsx","components/PlayerMetrics/PlayerMetrics.tsx","components/SortableTbodyWrapper/SortableTableWrapper.js","components/Page/Page.tsx","PokerLogic.ts","App.tsx","components/ErrorFallback/ErrorFallback.tsx","RootErrorBoundary.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionButtons","props","className","Button","canCheck","onClick","onClickFold","onClickCheck","onClickCall","canBet","onClickBet","onClickRaise","canStraddle","onClickBack","onClickShortAllin","onClickBetAllin","onClickRaiseAllin","onClickStraddle","undefined","OrderOfStats","NamesOfPosition","MetricCell","fraction","value","Math","round","numerator","denominator","Table","Cell","isNaN","PlayerMetrics","Row","player","status","folded","myTurn","info","name","position","EditPlayerInfo","id","AddPlayer","MoveBtn","erasable","ErasePlayer","map","key","stats","toString","SortableCont","SortableContainer","children","SortableItem","SortableElement","MyTable","celled","unstackable","Header","HeaderCell","metric","onSortEnd","axis","lockAxis","lockToContainerEdges","lockOffset","useDragHandle","state","pressDelay","index","players","whoseTurn","Page","useModal","preventScroll","Modal","open","close","useState","seatID","setSeatID","Array","playerCandidates","setPlayerCandidates","selectedUUID","setSelectedUUID","setName","memo","setMemo","isAdd","setIsAdd","options","onChange","opt","isSearchable","RegisterPlayer","Input","autoFocus","type","placeholder","e","target","Form","TextArea","playersInTable","filter","p","uuid","candidates","Object","values","window","PlayersDictionary","label","includes","unshift","console","log","StartNextHand","Action","Undo","Action_Straddle","Showdown","FindNextExistingPlayer","currentPlayerIdx","includeNewPlayer","i","SetPosition","btnIdx","numPlayers","cnt","idx","FinalizeHands","obj","Date","now","PlayersDictionaryLastLoadedTime","JSON","parse","localStorage","getItem","setItem","stringify","NextPlayer","includeAllin","lastAggressor","actioned","allin","InitializeBeforeBettingRound","isShowdown","lastAggressorOfPrevRound","numBet","GotoNextBettingRound","_","lodash","App","defaultStatsMap","cloneDeep","global_AppState","setState","RegisterPlayerSub","prev","cpy","Checkbox","toggle","event","data","checked","errorResolved","uuidv4","tags","btnStraddle","pStatus","lastStraddler","numActive","numAllin","InitializeBeforePreflop","actionType","current_player","metrics","firstAction","actiontype","bb","bbIsLastStraddler","fold","check","call","betRaise","UpdateStatsPreflop","CBed","isLastAgressorOfPrevRound","UpdateStatsFlop","UpdateStatsRiver","result","UpdateStatsShowdown","oldIndex","newIndex","arrayMoveMutable","resolveError","ErrorFallback","error","resetErrorBoundary","defaultPlayer","RootErrorBoundary","setErrorResolved","FallbackComponent","onReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.277bb000.chunk.js","sourcesContent":["import {VFC} from 'react';\nimport {Button} from 'semantic-ui-react';\n\ntype Props = {\n    canCheck: boolean;\n    canBet: boolean; // レイズではなくベットが可能である(numBet==0の場合true)\n    canStraddle: boolean;\n    onClickFold: () => void;\n    onClickCheck: () => void;\n    onClickCall: () => void;\n    onClickBet: () => void;\n    onClickRaise: () => void;\n    onClickBack: () => void;\n    onClickShortAllin: () => void;\n    onClickBetAllin: () => void;\n    onClickRaiseAllin: () => void;\n    onClickStraddle: () => void;\n}\n\nconst ActionButtons: VFC<Props> = (props) => {\n    return (\n        <>\n            <div className=\"ui three buttons\">\n                <Button className={\"ui \" + (props.canCheck ? \"basic\" : \"\") + \" blue button\"}\n                        onClick={props.onClickFold}>Fold</Button>\n                <Button className={\"ui \" + (props.canCheck ? \"olive\" : \"green\") + \" button\"}\n                        onClick={props.canCheck ? props.onClickCheck : props.onClickCall}>{props.canCheck ? \"Check\" : \"Call\"}</Button>\n                <Button className={\"ui \" + (props.canBet ? \"orange\" : \"red\") + \" button\"}\n                        onClick={props.canBet ? props.onClickBet : props.onClickRaise}>{props.canBet ? \"Bet\" : \"Raise\"}</Button>\n            </div>\n            <div className={props.canStraddle ? \"ui four buttons\" : \"ui three buttons\"}>\n                <Button className=\"ui black button\" onClick={props.onClickBack}>↩︎Back</Button>\n                {props.canCheck ? <Button/> :\n                    <Button className=\"ui violet button\" onClick={props.onClickShortAllin}>ShortAllin</Button>}\n                <Button className=\"ui purple button\"\n                        onClick={props.canBet ? props.onClickBetAllin : props.onClickRaiseAllin}>{props.canCheck ? \"AllIn\" : \"RaiseAllIn\"}</Button>\n                {props.canStraddle ?\n                    <Button className=\"ui pink button\" onClick={props.onClickStraddle}>Straddle</Button> : undefined}\n            </div>\n        </>\n    );\n};\n\nexport default ActionButtons;","type Append<Elm, T extends unknown[]> = ((\n    arg: Elm,\n    ...rest: T\n) => void) extends ((...args: infer T2) => void)\n    ? T2 : never;\n\ntype ArrayRec<N, Elm, Arr extends unknown[]> = {\n    0: Arr;\n    1: ArrayRec<N, Elm, Append<Elm, Arr>>;\n}[Arr extends { length: N } ? 0 : 1];\n\n// SArray<N, T> TをN個並べたタプル. 例SArray<3, number> := [number, number, number]\n// Nを正整数意外にした場合無限再起に陥る可能性がある.\ntype SArray<N extends number, T> = ArrayRec<N, T, [T]>;\n\nexport type Fraction = {\n    numerator: number\n    denominator: number\n}\n\nexport type PokerPosition = \"EMPTY\" | \"NEW\" | \"BB\" | \"SB\" | \"BTN\" | \"CO\" | \"HJ\" | \"LJ\" | \"+2\" | \"+1\" | \"UTG\";\nexport type PokerStats = \"VPIP\" | \"PFR\" | \"3B\" | \"F3B\" | \"CB\" | \"FCB\" | \"WT\" | \"W$\" | \"BBD\";\nexport const OrderOfStats: Array<PokerStats> = [\"VPIP\", \"PFR\", \"3B\", \"F3B\", \"CB\", \"FCB\", \"WT\", \"W$\", \"BBD\"];\nexport type StatsMap = { [stat in PokerStats]?: Fraction }\nexport const NamesOfPosition: PokerPosition[][] = [ // NamesOfPosition[プレイヤー数n][ボタンから数えて何番目?([0,n))]\n    [], // プレイヤー数0\n    [], // プレイヤー数1\n    [\"SB\", \"BB\"], // プレイヤー数2\n    [\"BTN\", \"SB\", \"BB\"], // プレイヤー数3\n    [\"BTN\", \"SB\", \"BB\", \"UTG\"], // プレイヤー数4\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"CO\"], // プレイヤー数5\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"HJ\", \"CO\"], // プレイヤー数6\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"LJ\", \"HJ\", \"CO\"], // プレイヤー数7\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"+1\", \"LJ\", \"HJ\", \"CO\"], // プレイヤー数8\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"+1\", \"+2\", \"LJ\", \"HJ\", \"CO\"] // プレイヤー数9\n];\nexport type BettingRound = \"PlayersShortage\" | \"BetweenHands\" | \"Preflop\" | \"Flop\" | \"Turn\" | \"River\" | \"Showdown\";\nexport type PokerAction = \"Fold\" | \"Check\" | \"Bet\" | \"Call\" | \"Raise\" | \"BetAllin\" | \"ShortAllin\" | \"RaiseAllin\";\nexport type PokerResult = \"Win\" | \"Lose\";\nexport const MAX_PLAYERS = 9;\n\n// 保存可能なプレイヤーの状態。\n// 名前、メモ、スタッツ\nexport type PlayerInfo = {\n    uuid: string;\n    name: string;\n    memo: string;\n    stats: StatsMap;\n    tags: Array<String>; // 検索用タグ.\n}\n\n// 保存されることのないプレイヤーのプレイ中の状態\nexport type PlayerStatus = {\n    position: PokerPosition;\n    folded: boolean;\n    allin: boolean;\n    actioned: boolean; // 現在のべっティングラウンドでアクションしたか\n}\n\nexport type PlayerAllInfo = {\n    info: PlayerInfo;\n    status: PlayerStatus;\n}\n\nexport type PlayerAllInfos = SArray<typeof MAX_PLAYERS, PlayerAllInfo>;\n\nexport type AppState = {\n    state: BettingRound;\n    players: PlayerAllInfos;\n    numPlayers: number;\n    btnIdx: number;\n    whoseTurn: number;\n    numAllin: number;\n    numActive: number;\n    lastAggressor: number;\n    lastAggressorOfPrevRound: number;\n    numBet: number; // 1bet, 2bet, 3bet,4bet...\n    lastStraddler: number; // 最後にストラドルした人。canCheckの判定に用いる。初期値はBB(ただしBTNストラドルならBTN)のプレイヤー。\n    canStraddle: boolean; // ストラドル以外のアクションが行われた時点でfalseになる。\n    prev?: AppState;\n}\n\nexport type LocalStoragePlayersDictionary = { [uuid: string]: PlayerInfo };\n\nexport const ReloadStorageDuration_milliseconds: number = 1000 * 60 * 5; // 5分\n","import {VFC} from 'react';\nimport {Table} from 'semantic-ui-react';\nimport './MetricCell.css'\nimport {Fraction} from \"../../Types\";\n\nconst MetricCell: VFC<Fraction> = (fraction) => {\n    const value = Math.round(fraction.numerator / fraction.denominator * 100);\n    return (\n        <Table.Cell className=\"metric-cell\">\n            <div className=\"metric-value\">{isNaN(value) ? \"-\" : value}</div>\n            <div className=\"metric-denominator\">({fraction.denominator})</div>\n        </Table.Cell>\n    );\n};\n\nexport default MetricCell;","import {VFC} from 'react';\nimport {Table} from 'semantic-ui-react';\nimport './PlayerMetrics.css';\nimport {OrderOfStats, PlayerAllInfo} from '../../Types';\nimport MetricCell from \"../MetricCell/MetricCell\";\n\ntype Props = {\n    id: number;\n    player: PlayerAllInfo;\n    myTurn: boolean;\n    AddPlayer?: () => void;\n    EditPlayerInfo?: () => void;\n    MoveBtn?: () => void;\n    erasable: boolean;\n    ErasePlayer?: () => void;\n}\n\nconst PlayerMetrics: VFC<Props> = (props) => {\n    return (\n        <Table.Row\n            className={(props.player.status.folded ? \"center aligned active row\"/*activeは灰色*/ :\n                (props.myTurn ? \"center aligned positive row\" : \"center aligned row\"))}>\n            <Table.Cell\n                className={\"table-first-cell\" + (props.player.info.name === \"hero\" ? \" table-first-cell-hero\" : \"\")} onClick={props.player.status.position === \"EMPTY\" ? (()=>{}) : props.EditPlayerInfo}>\n                <div>{props.id}</div>\n                <div className=\"table-player-name\">{props.player.info.name}</div>\n            </Table.Cell>\n            {props.player.status.position === \"EMPTY\" ?\n                // 空席ならタップでプレイヤー追加、そうでないならタップでボタン移動\n                <Table.Cell className=\"table-second-cell\" onClick={props.AddPlayer}><i\n                    className=\"user plus icon\"/></Table.Cell>\n                :\n                <Table.Cell className=\"table-second-cell\"\n                            onClick={props.MoveBtn}>{props.player.status.position}</Table.Cell>\n            }\n            {props.player.status.position !== \"EMPTY\" && props.erasable ?\n                //空席でないかつ削除可能期間ならプレイヤー削除ボタン。それ以外なら空欄\n                <Table.Cell className=\"table-third-cell\" onClick={props.ErasePlayer}><i\n                    className=\"user times icon\"/>\n                </Table.Cell>\n                : <Table.Cell className=\"table-third-cell\"/>\n            }\n\n            {OrderOfStats.map((key) => (\n                props.player.status.position !== \"EMPTY\" ?\n                    <MetricCell key={props.id.toString() + key} {...props.player.info.stats[key] ?? {\n                        numerator: -1,\n                        denominator: -1\n                    }}/>\n                    : <Table.Cell key={props.id.toString() + key} className=\"table-cell\"/>\n            ))}\n        </Table.Row>\n    );\n};\n\nexport default PlayerMetrics;","import {SortableContainer, SortableElement} from \"react-sortable-hoc\";\nimport {Table} from \"semantic-ui-react\"\nimport \"./SortableTableWrapper.css\"\nimport {OrderOfStats} from \"../../Types\";\nimport PlayerMetrics from \"../PlayerMetrics/PlayerMetrics\";\n\nconst SortableCont = SortableContainer(({children}) => {\n    return <tbody>{children}</tbody>;\n});\n\nconst SortableItem = SortableElement((props) => <PlayerMetrics id={props.id} player={props.player} myTurn={props.myTurn}\n                                                               AddPlayer={props.AddPlayer}\n                                                               EditPlayerInfo={props.EditPlayerInfo}\n                                                               MoveBtn={props.MoveBtn}\n                                                               erasable={props.erasable}\n                                                               ErasePlayer={props.ErasePlayer}/>);\n\nconst MyTable = (props) => {\n    return (\n        <Table className=\".table\" celled unstackable>\n            <Table.Header>\n                <Table.Row className=\"ui center aligned\">\n                    <Table.HeaderCell className=\"header-cell\"/>\n                    <Table.HeaderCell className=\"header-cell\"/>\n                    <Table.HeaderCell className=\"header-cell\"/>\n                    {\n                        OrderOfStats.map((metric) => (\n                            <Table.HeaderCell key={metric} className=\"header-cell\">{metric}</Table.HeaderCell>\n                        ))\n                    }\n                </Table.Row>\n            </Table.Header>\n            <SortableCont\n                onSortEnd={props.onSortEnd}\n                axis=\"y\"\n                lockAxis=\"y\"\n                lockToContainerEdges={true}\n                lockOffset={[\"30%\", \"50%\"]}\n                useDragHandle={!(props.state === \"BetweenHands\" || props.state === \"PlayersShortage\") /*ハンド間以外はuseDragHandleをtrueにしてドラッグ不可にする*/}\n                pressDelay={200}\n            >\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((id) => (\n                    <SortableItem\n                        key={`item-${id}`}\n                        index={id}\n                        id={id + 1}\n                        player={props.players[id]}\n                        myTurn={props.whoseTurn === id}\n                        AddPlayer={() => props.AddPlayer(id)}\n                        EditPlayerInfo={() => props.EditPlayerInfo(id)}\n                        MoveBtn={() => props.MoveBtn(id)}\n                        erasable={(props.state === \"BetweenHands\" || props.state === \"PlayersShortage\") && props.players[id].status.position !== \"BTN\"}\n                        ErasePlayer={() => props.ErasePlayer(id)}\n                    />\n                ))}\n            </SortableCont>\n        </Table>\n    );\n};\n\nexport default MyTable;\n","import {VFC, useState} from 'react';\nimport {Button, Form, Input, TextArea} from 'semantic-ui-react';\nimport {useModal} from 'react-hooks-use-modal';\nimport './Page.css';\nimport {\n    BettingRound,\n    PokerAction,\n    PokerResult,\n    PlayerAllInfos\n} from '../../Types'\nimport ActionButtons from \"../ActionButtons/ActionButtons\";\nimport SortableTbodyWrapper from \"../SortableTbodyWrapper/SortableTableWrapper.js\";\nimport Select from \"react-select\";\n\ntype Props = {\n    players: PlayerAllInfos;\n    RegisterPlayer: (seatID: number, uuid: string) => void;\n    EditPlayerInfo: (seatID: number, name: string, memo: string) => void;\n    MoveBtn: (seatID: number) => void;\n    state: BettingRound;\n    StartNextHand: (btnStraddle: boolean) => void;\n    Action: (actionType: PokerAction) => void;\n    canCheck: boolean;\n    Undo: () => void;\n    whoseTurn: number;\n    Showdown: (result: PokerResult) => void;\n    ErasePlayer: (seatID: number) => void;\n    onSortEnd: (oldIndex: number, newIndex: number) => void;\n    canBet: boolean;\n    canStraddle: boolean;\n    Action_Straddle: () => void;\n}\n\nconst Page: VFC<Props> = (props) => {\n    const [Modal, open, close] = useModal('root', {\n        preventScroll: true,\n    });\n    const [seatID, setSeatID] = useState(-1);\n    const [playerCandidates, setPlayerCandidates] = useState(Array<{ value: string, label: string }>);\n    const [selectedUUID, setSelectedUUID] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [memo, setMemo] = useState(\"\");\n    const [isAdd, setIsAdd] = useState(true);\n\n    return (\n        <>\n            <Modal>\n                {isAdd ?\n                    <>\n                        <Select options={playerCandidates} onChange={opt => setSelectedUUID(opt?.value ?? \"\")}\n                                isSearchable={false}></Select>\n                        <div className=\"ui two buttons\">\n                            <Button onClick={() => {\n                                props.RegisterPlayer(seatID, selectedUUID);\n                                close();\n                            }}>Add</Button>\n                            <Button onClick={close}>Cancel</Button>\n                        </div>\n                    </>\n                    :\n                    <>\n                        <div className=\"ui input\">\n                            <Input autoFocus type=\"text\" placeholder=\"Name...\" value={name} className=\"modal-textbox\"\n                                   control-id=\"CID-1\" onChange={e => setName(e.target.value)}/>\n                        </div>\n                        <Form>\n                            <TextArea placeholder=\"memo...\" value={memo} onChange={e => setMemo(e.target.value)}/>\n                        </Form>\n                        <div className=\"ui two buttons\">\n                            <Button onClick={() => {\n                                props.EditPlayerInfo(seatID, name, memo);\n                                close();\n                            }}>OK</Button>\n                            <Button onClick={close}>Cancel</Button>\n                        </div>\n                    </>\n                }\n            </Modal>\n            <SortableTbodyWrapper players={props.players}\n                                  whoseTurn={props.whoseTurn}\n                                  AddPlayer={(id: number) => {\n                                      setIsAdd(true);\n                                      setSeatID(id);\n                                      setSelectedUUID(\"\");\n                                      let playersInTable: Array<string> = props.players.filter(p => (p.status.position !== \"EMPTY\")).map(p => (p.info.uuid));\n                                      let candidates: Array<{ value: string, label: string }> =\n                                          Object.values(window.PlayersDictionary)\n                                              .filter(\n                                                  p => (p.name !== \"\")\n                                              )\n                                              .map(\n                                                  p => ({value: p.uuid, label: p.name})\n                                              )\n                                              .filter(\n                                                  p => (!playersInTable.includes(p.value))\n                                              );\n                                      candidates.unshift({value: \"\", label: \"New player\"});\n                                      setPlayerCandidates(candidates);\n                                      open();\n                                  }}\n                                  EditPlayerInfo={(id: number) => {\n                                      console.log(\"Edit Player Info\" + id);\n                                      setIsAdd(false);\n                                      setName(props.players[id].info.name);\n                                      setMemo(props.players[id].info.memo);\n                                      setSeatID(id);\n                                      open();\n                                  }}\n                                  MoveBtn={props.MoveBtn}\n                                  state={props.state}\n                                  ErasePlayer={props.ErasePlayer}\n                                  onSortEnd={props.onSortEnd}/>\n\n            {props.state === \"PlayersShortage\" ?\n                <h4>At least 3 players are needed.</h4>\n                : undefined\n            }\n            {props.state === \"BetweenHands\" ?\n                <>\n                    <h4>Move the dealer button by tapping the position of a player if necessary.</h4>\n                    <Button onClick={() => {\n                        props.StartNextHand(false)\n                    }}>Start next hand</Button>\n                    <Button onClick={() => {\n                        props.StartNextHand(true)\n                    }}>Start next hand(BTN Straddle)</Button>\n                </>\n                : undefined\n            }\n            {((props.state === \"Preflop\") || (props.state === \"Flop\") || (props.state === \"Turn\") || (props.state === \"River\")) ?\n                <>\n                    <h4>{props.state}</h4>\n                    <ActionButtons canCheck={props.canCheck} onClickFold={() => props.Action(\"Fold\")}\n                                   onClickCheck={() => props.Action(\"Check\")} onClickCall={() => props.Action(\"Call\")}\n                                   onClickBet={() => props.Action(\"Bet\")} onClickRaise={() => props.Action(\"Raise\")}\n                                   onClickBack={props.Undo} onClickShortAllin={() => props.Action(\"ShortAllin\")}\n                                   onClickBetAllin={() => props.Action(\"BetAllin\")}\n                                   onClickRaiseAllin={() => props.Action(\"RaiseAllin\")}\n                                   canStraddle={props.canStraddle} canBet={props.canBet}\n                                   onClickStraddle={props.Action_Straddle}></ActionButtons>\n                </>\n                : undefined\n            }\n            {props.state === \"Showdown\" ?\n                <>\n                    <h4>{props.state}</h4>\n                    <div className=\"ui three buttons\">\n                        <Button className=\"ui black button\" onClick={props.Undo}>︎︎↩︎Back</Button>\n                        <Button className=\"ui yellow button\" onClick={() => props.Showdown(\"Win\")}>Win</Button>\n                        <Button className=\"ui blue button\" onClick={() => props.Showdown(\"Lose\")}>Lose</Button>\n                    </div>\n                </>\n                : undefined\n            }\n        </>\n    );\n};\n\nexport default Page;","import {\n    NamesOfPosition,\n    MAX_PLAYERS,\n    AppState,\n    StatsMap,\n    PokerAction,\n    PokerResult,\n    PlayerAllInfos, LocalStoragePlayersDictionary, ReloadStorageDuration_milliseconds\n} from './Types'\n\n// currenPlayerの次の空席でないプレイヤーを探す。\n// EMPTYは検索対象外\n// includeNewPlayerがtrueならポジションがNEWのプレイヤーも検索対象となる\n// currentPlayer以外検索対象でないならcurrentPlayerが返り値となる\n// currentPlayerも含めて誰も検索対象でないなら-1が返り値となる\nconst FindNextExistingPlayer = (currentPlayerIdx: number, players: PlayerAllInfos, includeNewPlayer: boolean): number => {\n    if (currentPlayerIdx < 0 || MAX_PLAYERS <= currentPlayerIdx) {\n        return -1;\n    }\n    for (let i = currentPlayerIdx + 1; i < MAX_PLAYERS; ++i) {\n        if (players[i].status.position === \"EMPTY\") {\n            continue;\n        }\n        if (!includeNewPlayer && players[i].status.position === \"NEW\") {\n            continue;\n        }\n        return i;\n    }\n    // 返り値がcurrentPlayerとなる場合もあるため<=で正しい\n    for (let i = 0; i <= currentPlayerIdx; ++i) {\n        if (players[i].status.position === \"EMPTY\") {\n            continue;\n        }\n        if (!includeNewPlayer && players[i].status.position === \"NEW\") {\n            continue;\n        }\n        return i;\n    }\n    return -1;\n}\n\n// BTNのプレイヤーのインデックスを指定すると、各プレイヤーのポジションを埋める\n// プレイヤーの人数に応じて適切なポジション名が選択される\nexport const SetPosition = (players: PlayerAllInfos, btnIdx: number, numPlayers: number): void => {\n    console.log(\"SetPosition\");\n    let cnt = 0;\n    for (let idx = btnIdx; cnt < numPlayers; idx = FindNextExistingPlayer(idx, players, true)) {\n        if (cnt !== 0 && idx === btnIdx) {\n            console.log(\"error: numPlayers is wrong. numPlayers is \" + numPlayers + \" cnt is \" + cnt);\n        }\n        if (idx === -1) {\n            console.log(\"error: numPlayers is wrong. numPlayers is \" + numPlayers + \" cnt is \" + cnt);\n            return;\n        }\n        players[idx].status.position = NamesOfPosition[numPlayers][cnt++];\n    }\n}\n\nexport const NextBtn = (players: PlayerAllInfos, btnIdx: number): number => {\n    console.log(\"NextBtn\");\n    return FindNextExistingPlayer(btnIdx, players, true);\n}\n\nexport const FinalizeHands = (obj: AppState): void => {\n    console.log(\"Finalizehands\");\n    obj.state = \"BetweenHands\";\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        obj.players[i].status.folded = false; // foldしていたプレイヤーが灰色になっているので表示を戻す。\n    }\n    obj.btnIdx = NextBtn(obj.players, obj.btnIdx); // ボタン移動\n    SetPosition(obj.players, obj.btnIdx, obj.numPlayers); // ボタン移動\n    obj.whoseTurn = -1; // 緑色で表示する行をなくすため\n    // プレイヤーの情報をローカルストレージに保存.\n    // window.PlayersDictionaryが古い場合、データを消してしまわないように再読み込み\n    if(Date.now() - window.PlayersDictionaryLastLoadedTime >= ReloadStorageDuration_milliseconds){\n        console.log(\"players info are reloaded from localstorage\")\n        window.PlayersDictionary = JSON.parse(localStorage.getItem('players') ?? '{}') as LocalStoragePlayersDictionary;\n        window.PlayersDictionaryLastLoadedTime = Date.now();\n    }\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        if (obj.players[i].status.position !== \"EMPTY\") {\n            window.PlayersDictionary[obj.players[i].info.uuid] = obj.players[i].info;\n        }\n    }\n    localStorage.setItem('players', JSON.stringify(window.PlayersDictionary));\n    console.log(\"players info are stored to localstorage\")\n    console.log(\"FinalizeHands end\")\n}\n\n// folded, allind, actionedを参照し、このべっティングラウンドで次にアクションすべきプレイヤーを決定する\n// includeAllin: オールインしたプレイヤーが選ばれる可能性があるか。ショーダウン時のみtrueにすべき。\nexport const NextPlayer = (currentPlayerIdx: number, obj: AppState, includeAllin: boolean): number => {\n    console.log(\"NextPlayer\");\n    for (let i = FindNextExistingPlayer(currentPlayerIdx, obj.players, false)\n        ; i !== currentPlayerIdx && i !== -1\n        ; i = FindNextExistingPlayer(i, obj.players, false)) {\n        // return -1の判定とcontinueの判定を入れ替えると、オールインしたプレイヤーがラストアグレッサーだった場合にバグる\n        if (obj.lastAggressor === i) {\n            console.log(\"NextPlayer is -1. obj.lastAggressor === \" + i);\n            return -1;\n        }\n        if (obj.lastAggressor === -1 && obj.players[i].status.actioned) {\n            console.log(\"NextPlayer is -1. obj.actioned[\" + i + \"]\");\n            return -1;\n        }\n        if (obj.players[i].status.folded) {\n            continue;\n        }\n        if (!includeAllin && obj.players[i].status.allin) {\n            continue;\n        }\n        return i;\n    }\n    console.log(\"NextPlayer is -1.\");\n    return -1;\n}\n\n// べっティングラウンドを跨ぐ際にリセットすべき、actioned, whoseTurn, lastAggressor, lastAgressorOfPrevRound, numBetを初期値にセットする。\n// stateは変更しない\n// isShowdownがtrueならオールインしている人がwhoseTurnになる可能性がある\nexport const InitializeBeforeBettingRound = (obj: AppState, isShowdown: boolean): void => {\n    console.log(\"InitializeBeforeBettingRound\");\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        obj.players[i].status.actioned = false;\n    }\n    obj.lastAggressorOfPrevRound = obj.lastAggressor;\n    obj.lastAggressor = -1;\n    obj.numBet = 0;\n    obj.whoseTurn = NextPlayer(obj.btnIdx, obj, isShowdown); // ボタンの次の人。NextPlayerがlastAggressorに依存しているのでobj.lastAggressorを先に初期化。\n}\n\n// InitializeBeforeBettingRoundに加えてfolded,allind,whoseTurn,numAllin,numActive,lastAgressorOfPrevRound,numBetに適切な値をセットする必要がある\n// BBのプレイヤーをlastStraddlerにし、canStraddleをtrueにする。BTNストラドルの場合はこの関数を終えた後追加の処理が必要がある.\nexport const InitializeBeforePreflop = (obj: AppState): void => {\n    // position,btnIdxはFinalizeHandsやMoveBtnで正しくセットされている。\n    console.log(\"InitializeBeforePreflop\");\n    obj.state = \"Preflop\";\n    InitializeBeforeBettingRound(obj, false); // whoseTurn, lastAgressorOfPrevRound, numBetに正しくない値がセットされる。\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        const pStatus = obj.players[i].status;\n        pStatus.folded = (pStatus.position === \"EMPTY\"); // 空席を灰色表示するため\n        pStatus.allin = false;\n        if (obj.numPlayers === 3 && pStatus.position === \"BTN\") {\n            obj.whoseTurn = i;\n        } else if (obj.numPlayers >= 4 && pStatus.position === \"UTG\") {\n            obj.whoseTurn = i;\n        }\n        if (pStatus.position === \"BB\") {\n            obj.lastStraddler = i;\n        }\n    }\n    obj.numActive = obj.numPlayers;\n    obj.numAllin = 0;\n    obj.lastAggressorOfPrevRound = -1;\n    obj.numBet = 1; // BB\n    obj.canStraddle = true;\n}\n\nexport const GotoNextBettingRound = (obj: AppState): void => {\n    console.log(\"ToNextBettingRound\");\n    if (obj.state === \"Preflop\") obj.state = \"Flop\";\n    else if (obj.state === \"Flop\") obj.state = \"Turn\";\n    else if (obj.state === \"Turn\") obj.state = \"River\";\n    else if (obj.state === \"River\") obj.state = \"Showdown\";\n    else {\n        console.log(\"error: ToNextBettingRound called but the current round is \" + obj.state);\n        return;\n    }\n    InitializeBeforeBettingRound(obj, obj.state === \"Showdown\");\n}\n\n// プリフロップのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// firstAction: 該当プレイヤーのこのラウンドでの初めてのアクションか\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\n// bbIsLastStraddlerがfalseの場合、BBディフェンス率は更新しない。\nexport const UpdateStatsPreflop = (metrics: StatsMap, numBet: number, firstAction: boolean, actiontype: PokerAction, bb: boolean, bbIsLastStraddler: boolean): void => {\n    console.log(\"Update Stats Preflop\");\n    const fold = (actiontype === \"Fold\");\n    const check = (actiontype === \"Check\");\n    const call = (actiontype === \"Call\" || actiontype === \"ShortAllin\");\n    const betRaise = (actiontype === \"Bet\" || actiontype === \"Raise\" || actiontype === \"BetAllin\" || actiontype === \"RaiseAllin\");\n    // VPIP PFR 3B BBD: プリフロの最初のアクションを集計\n    // F3B: プリフロの二回目以降のアクションを集計\n    if (firstAction) {\n        // 最初のアクション\n        // チェック(lastStraddler)の場合、増減なし\n        if (!check) {\n            metrics[\"VPIP\"]!.denominator += 1;\n        }\n        if (call || betRaise) {\n            metrics[\"VPIP\"]!.numerator += 1;\n        }\n        metrics[\"PFR\"]!.denominator += 1;\n        if (betRaise) {\n            metrics[\"PFR\"]!.numerator += 1;\n        }\n        if (numBet === 2) {\n            metrics[\"3B\"]!.denominator += 1;\n            if (betRaise) metrics[\"3B\"]!.numerator += 1;\n        }\n        if (bb && bbIsLastStraddler && !check) { // 他の人がストラドルしている場合と、チェックの場合は分母にも分子にもカウントしない\n            metrics[\"BBD\"]!.denominator += 1;\n            if (call || betRaise) metrics[\"BBD\"]!.numerator += 1;\n        }\n    } else if (numBet === 3) {\n        // 2回目以降かつ3betが入っている場合のアクション\n        metrics[\"F3B\"]!.denominator += 1;\n        if (fold) metrics[\"F3B\"]!.numerator += 1;\n    }\n}\n\n// フロップのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// isLastAggressorOfPrevRound: このプレイヤーはプリフロのラストアグレッサーか?\n// CBed: フロップのラストアグレッサー==プリフロのラストアグレッサーならtrue。numBet!=1の時は未定義で構わない。\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsFlop = (metrics: StatsMap, numBet: number, CBed: boolean, isLastAgressorOfPrevRound: boolean, actiontype: PokerAction): void => {\n    console.log(\"Update Stats Flop\");\n    const fold = (actiontype === \"Fold\");\n    const betRaise = (actiontype === \"Bet\" || actiontype === \"Raise\" || actiontype === \"BetAllin\" || actiontype === \"RaiseAllin\");\n    // CB, FCBを更新\n    // フロップ以降にフォールドした人はWTSDの分母加算\n    if (isLastAgressorOfPrevRound && numBet === 0) {\n        metrics[\"CB\"]!.denominator += 1;\n        if (betRaise) metrics[\"CB\"]!.numerator += 1;\n    }\n    if (CBed && numBet === 1) {\n        metrics[\"FCB\"]!.denominator += 1;\n        if (fold) metrics[\"FCB\"]!.numerator += 1;\n    }\n    if (fold) {\n        metrics[\"WT\"]!.denominator += 1;\n    }\n}\n\n// ターンのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsTurn = (metrics: StatsMap, actiontype: PokerAction): void => {\n    console.log(\"Update Stats Turn\");\n    if (actiontype === \"Fold\") {\n        metrics[\"WT\"]!.denominator += 1;\n    }\n}\n\n// リバーのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsRiver = (metrics: StatsMap, actiontype: PokerAction): void => {\n    console.log(\"Update Stats River\");\n    if (actiontype === \"Fold\") {\n        metrics[\"WT\"]!.denominator += 1;\n    }\n}\n\n// ショーダウンの結果に応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsShowdown = (metrics: StatsMap, result: PokerResult): void => {\n    metrics[\"WT\"]!.denominator += 1;\n    metrics[\"WT\"]!.numerator += 1;\n    metrics[\"W$\"]!.denominator += 1;\n    if (result === \"Win\") {\n        metrics[\"W$\"]!.numerator += 1;\n    }\n}\n","import React from 'react';\nimport * as lodash from 'lodash';\nimport './App.css';\nimport Page from \"./components/Page/Page\";\nimport {\n    StatsMap,\n    OrderOfStats,\n    PokerAction,\n    PokerResult,\n    MAX_PLAYERS,\n    AppState, PlayerInfo\n} from \"./Types\"\nimport {\n    SetPosition,\n    FinalizeHands,\n    InitializeBeforePreflop,\n    NextPlayer,\n    GotoNextBettingRound,\n    UpdateStatsPreflop,\n    UpdateStatsFlop,\n    UpdateStatsTurn,\n    UpdateStatsRiver,\n    UpdateStatsShowdown\n} from \"./PokerLogic\"\nimport {\n    useState\n} from 'react';\nimport {arrayMoveMutable} from 'array-move';\nimport {Button, Checkbox} from \"semantic-ui-react\";\nimport {useModal} from \"react-hooks-use-modal\";\nimport {v4 as uuidv4} from 'uuid';\n\nconst _ = lodash;\ntype Props = {\n    errorResolved: boolean;\n    resolveError: () => void; // errorResolvedがfalseなら必須\n};\n\nfunction App(props: Props) {\n    let defaultStatsMap: StatsMap = {\"VPIP\": {numerator: 0, denominator: 0}};\n    OrderOfStats.map((metric) => (defaultStatsMap[metric] = {numerator: 0, denominator: 0}));\n    const [state, setState] = useState<AppState>(_.cloneDeep(window.global_AppState));\n\n    const MoveBtn = (id: number): void => {\n        console.log(\"MoveBtn\");\n        setState((prev) => {\n            try {\n                if (prev.state !== \"BetweenHands\") {\n                    // ボタンを動かせるのはハンド間のみ\n                    return prev;\n                }\n                if (prev.players[id].status.position[id] === \"EMPTY\") {\n                    // 空席にはボタンを置けない(デッドボタン未対応)\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                console.log(\"c\");\n                cpy.btnIdx = id;\n                SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers);\n                return cpy;\n            } catch {\n                return prev;\n            }\n        })\n    }\n    // プレイヤーを追加.\n    const RegisterPlayerSub = (id: number, player: PlayerInfo): void => {\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                cpy.numPlayers += 1;\n                cpy.players[id].info = player;\n                cpy.players[id].status.position = \"NEW\";\n\n                if (cpy.state !== \"BetweenHands\" && cpy.state !== \"PlayersShortage\") {\n                    return cpy; // ハンド間以外はNEWのまま置いておく\n                }\n\n                if (cpy.numPlayers === 3) {\n                    // assert(cpy.state == \"PlayersShortage\");\n                    cpy.btnIdx = id;\n                    FinalizeHands(cpy); // 人数不足から脱却。別のメソッドを用意した方が分かりやすいかもしれない。\n                } else {\n                    SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers); // ハンド間なら即時反映\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    // プレイヤーをゲームに追加.\n    // uuidが空文字列なら新規プレイヤー.\n    const RegisterPlayer = (id: number, uuid: string): void => {\n        if (uuid === \"\") {\n            console.log(\"Register new player\");\n            const player: PlayerInfo = {\n                uuid: uuidv4(),\n                name: \"\",\n                memo: \"\",\n                stats: _.cloneDeep((defaultStatsMap)),\n                tags: []\n            };\n            RegisterPlayerSub(id, player);\n        } else if (uuid in window.PlayersDictionary) {\n            console.log(\"Load player\");\n            RegisterPlayerSub(id, window.PlayersDictionary[uuid]);\n        } else {\n            console.log(\"Player not found\");\n            RegisterPlayer(id, \"\");\n        }\n\n    };\n    const EditPlayerInfo = (seatID: number, name: string, memo: string): void => {\n        setState((prev) => {\n            try {\n                if (prev.players[seatID].status.position === \"EMPTY\") {\n                    // 誰もいないなら編集できない\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                window.global_AppState = cpy;\n                cpy.prev = prev;\n                cpy.players[seatID].info.name = name;\n                cpy.players[seatID].info.memo = memo;\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const ErasePlayer = (id: number): void => {\n        console.log(\"ErasePlayer\");\n        setState((prev) => {\n            try {\n                if (prev.players[id].status.position === \"BTN\") {\n                    // ボタンは削除できない\n                    return prev;\n                }\n                if (prev.state !== \"BetweenHands\" && prev.state !== \"PlayersShortage\") {\n                    // 削除できるのはハンド間のみ\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                window.global_AppState = cpy;\n                cpy.prev = prev;\n                cpy.numPlayers -= 1;\n                cpy.players[id].status.position = \"EMPTY\";\n                cpy.players[id].info.name = \"\";\n\n                if (cpy.numPlayers === 2) {\n                    cpy.btnIdx = id;\n                    for (let i = 0; i < MAX_PLAYERS; ++i) {\n                        if (cpy.players[i].status.position !== \"EMPTY\") cpy.players[i].status.position = \"NEW\";\n                    }\n                    cpy.state = \"PlayersShortage\" // 人数不足\n                } else {\n                    // ポジション修正\n                    SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers);\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const StartNextHand = (btnStraddle: boolean): void => {\n        console.log(\"StartNextHand\");\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                window.global_AppState = cpy;\n                cpy.prev = prev;\n                prev.prev = undefined; // これより前に戻れないのでガベージコレクタに回収させる\n                InitializeBeforePreflop(cpy);\n                if (btnStraddle) {\n                    // lastStraddlerをBTNのプレイヤーにする\n                    // straddle不能状態にする\n                    // プリフロップのアクションをSBから開始する\n                    cpy.lastStraddler = cpy.btnIdx;\n                    cpy.canStraddle = false;\n                    for (let i = 0; i < MAX_PLAYERS; ++i) {\n                        if (cpy.players[i].status.position === \"SB\") {\n                            cpy.whoseTurn = i;\n                        }\n                    }\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const Action_Straddle = (): void => {\n        // Actionの一部としてもいいが、関数が肥大化しているので分離する\n        // lastStraddler更新。canStraddleは引き続きtrue。次のプレイヤーへ。\n        // ただし、SBに達したらcanStraddleはfalseに変更する。\n        // actioned,numBetは更新しない。更新すべきスタッツはない。\n        console.log(\"Action_Straddle\");\n        console.log(state.whoseTurn + 1);\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                cpy.lastStraddler = cpy.whoseTurn;\n                cpy.whoseTurn = NextPlayer(cpy.whoseTurn, cpy, false);\n                if (cpy.players[cpy.whoseTurn].status.position === \"SB\") {\n                    cpy.canStraddle = false;\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        })\n    }\n    const Action = (actionType: PokerAction): void => {\n        console.log(\"Action\");\n        console.log((state.whoseTurn + 1) + actionType);\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                cpy.canStraddle = false; // ストラドル以外のあらゆるアクションでストラドル権が失われる。\n                // calculate stats\n                // 最後の一人のWTSDはここでは更新できないことに注意\n                const current_player = cpy.players[cpy.whoseTurn];\n                const stats = current_player.info.stats;\n                if (cpy.state === \"Preflop\") {\n                    UpdateStatsPreflop(stats, cpy.numBet, !current_player.status.actioned, actionType, current_player.status.position === \"BB\", cpy.players[cpy.lastStraddler]?.status.position === \"BB\" ?? false);\n                } else if (cpy.state === \"Flop\") {\n                    UpdateStatsFlop(stats, cpy.numBet, cpy.lastAggressor === cpy.lastAggressorOfPrevRound, cpy.whoseTurn === cpy.lastAggressorOfPrevRound, actionType);\n                } else if (cpy.state === \"Turn\") {\n                    UpdateStatsTurn(stats, actionType);\n                } else if (cpy.state === \"River\") {\n                    UpdateStatsRiver(stats, actionType);\n                }\n\n                current_player.status.actioned = true;\n                switch (actionType) {\n                    case \"Fold\":\n                        current_player.status.folded = true;\n                        cpy.numActive -= 1;\n                        break;\n                    case \"Check\":\n                    case \"Call\":\n                        break;\n                    case \"Bet\":\n                    case \"Raise\":\n                        cpy.lastAggressor = cpy.whoseTurn;\n                        cpy.numBet += 1;\n                        break;\n                    case \"BetAllin\":\n                    case \"RaiseAllin\":\n                        cpy.lastAggressor = cpy.whoseTurn;\n                        cpy.numAllin += 1;\n                        cpy.numActive -= 1;\n                        cpy.numBet += 1;\n                        current_player.status.allin = true;\n                        break;\n                    case \"ShortAllin\":\n                        cpy.numAllin += 1;\n                        cpy.numActive -= 1;\n                        current_player.status.allin = true;\n                        break;\n                    default:\n                        console.log(\"error: Action(\" + actionType + \")\");\n                }\n                if (cpy.numActive + cpy.numAllin === 1) {\n                    // ハンド終了。\n                    console.log(\"numActive becomes 1.\");\n                    // ショーダウンが行われないので残った一人のWTSDの分母に1加算\n                    if (cpy.state !== \"Preflop\") {\n                        for (let i = 0; i < MAX_PLAYERS; ++i) {\n                            if (cpy.players[i].status.position !== \"EMPTY\"\n                                && cpy.players[i].status.position !== \"NEW\"\n                                && !cpy.players[i].status.folded) {\n                                cpy.players[i].info.stats[\"WT\"]!.denominator += 1;\n                            }\n                        }\n                    }\n                    FinalizeHands(cpy);\n                    return cpy;\n                } else if (cpy.numActive === 0 && cpy.numAllin >= 2) {\n                    // オールインのみのショーダウンへ\n                    cpy.state = \"River\";\n                    GotoNextBettingRound(cpy); // 専用のメソッドを作った方がわかりやすいかもしれない。\n                    return cpy;\n                } else {\n                    // ハンド継続\n                    cpy.whoseTurn = NextPlayer(cpy.whoseTurn, cpy, false);\n                    if (cpy.whoseTurn === -1 && cpy.numActive >= 2) {\n                        // 次のベッティングラウンドへ\n                        console.log(\"next round.\");\n                        GotoNextBettingRound(cpy);\n                    } else if (cpy.whoseTurn === -1 && cpy.numActive === 1) {\n                        // ショーダウンへ\n                        console.log(\"showdown\");\n                        cpy.state = \"River\";\n                        GotoNextBettingRound(cpy);\n                    }\n                    return cpy;\n                }\n            } catch {\n                return prev;\n            }\n        })\n    }\n    const Showdown = (result: PokerResult): void => {\n        console.log(\"Showdown\");\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                UpdateStatsShowdown(cpy.players[cpy.whoseTurn].info.stats, result);\n                if (cpy.players[cpy.whoseTurn].status.allin) cpy.numAllin -= 1;\n                else cpy.numActive -= 1;\n                if (cpy.numActive + cpy.numAllin === 0) {\n                    FinalizeHands(cpy);\n                } else {\n                    cpy.whoseTurn = NextPlayer(cpy.whoseTurn, cpy, true);\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const Undo = (): void => {\n        setState((prev) => prev.prev ?? prev);\n    }\n    // ここのタイプ宣言は分からない\n    // プレイヤーの並べ替えが可能なのはハンド間のみ\n    // oldIndex=btnIdxならボタンをnewIndexに移動\n    // ポジション再配置\n    // 一番上の人をボタンにする。(将来的に変更したい)\n    const onSortEnd = ({oldIndex, newIndex}: any): void => {\n        console.log(\"onSortEnd \" + oldIndex + \", \" + newIndex);\n        setState((prev) => {\n            try {\n                if (!(prev.state === \"PlayersShortage\" || prev.state === \"BetweenHands\")) {\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                arrayMoveMutable(cpy.players, oldIndex, newIndex);\n                for (let i = 0; i < MAX_PLAYERS; ++i) {\n                    if (cpy.players[i].status.position !== \"EMPTY\") {\n                        cpy.btnIdx = i;\n                        break;\n                    }\n                }\n                SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers); // ポジション修正\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const onReset = (): void => {\n        window.global_AppState = (window.global_AppState.prev ?? window.global_AppState);\n        props.resolveError();\n    };\n    const [Modal, open, close] = useModal('root', {\n        preventScroll: true,\n    });\n    return (\n        <>\n            <Modal>\n                <Checkbox toggle label=\"straddle is available\"\n                          onChange={(event, data) => console.log(data.checked)}></Checkbox>\n                <div className=\"ui two buttons\">\n                    <Button>Add</Button>\n                    <Button onClick={close}>Cancel</Button>\n                </div>\n            </Modal>\n            <div className=\"ui left aligned button\" onClick={open}><i className=\"setting icon\"/></div>\n            {props.errorResolved ?\n                // エラーではない\n                <Page key={\"root-page-key\"} RegisterPlayer={RegisterPlayer} EditPlayerInfo={EditPlayerInfo}\n                      MoveBtn={MoveBtn} state={state.state}\n                      StartNextHand={StartNextHand}\n                      Action={Action} Undo={Undo} whoseTurn={state.whoseTurn}\n                      canCheck={(state.numBet === 0)\n                          || (state.state === \"Preflop\" && state.whoseTurn === state.lastStraddler && state.numBet === 1)}\n                      Showdown={Showdown} ErasePlayer={ErasePlayer} players={state.players} onSortEnd={onSortEnd}\n                      canStraddle={state.canStraddle} canBet={state.numBet === 0} Action_Straddle={Action_Straddle}/>\n                :\n                //エラー\n                <>\n                    <p>エラーが発生しました。下記の内容を開発者にお知らせください。</p>\n                    <Button onClick={onReset}>復帰</Button>\n                    <p>State0:<br/>{JSON.stringify(window.global_AppState)}</p>\n                </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","import {FallbackProps} from 'react-error-boundary'\n\nfunction ErrorFallback({error, resetErrorBoundary}: FallbackProps) {\n    return (\n        <div>\n            <h2>エラーが発生しました。次の画面で詳細が表示されます。以下の内容と次の画面で表示される内容を開発者にお知らせください。</h2>\n            <button onClick={resetErrorBoundary}>\n                次へ\n            </button>\n        </div>\n    )\n}\n\nexport default ErrorFallback\n","import React, {useState} from 'react';\nimport {ErrorBoundary} from 'react-error-boundary'\nimport App from './App';\nimport ErrorFallback from \"./components/ErrorFallback/ErrorFallback\"\nimport {AppState, LocalStoragePlayersDictionary, OrderOfStats, PlayerAllInfo, StatsMap} from \"./Types\";\nimport * as lodash from \"lodash\";\n\ndeclare global {\n    interface Window {\n        global_AppState: AppState\n        PlayersDictionary: LocalStoragePlayersDictionary\n        PlayersDictionaryLastLoadedTime: number\n    }\n}\nconst _ = lodash;\nlet defaultStatsMap: StatsMap = {};\nOrderOfStats.map((metric) => (defaultStatsMap[metric] = {numerator: 0, denominator: 0}));\nconst defaultPlayer: PlayerAllInfo = {\n    info: {uuid: 'null', name: \"\", memo: \"\", stats: defaultStatsMap, tags: []},\n    status: {position: \"EMPTY\", folded: false, allin: false, actioned: false}\n};\nwindow.global_AppState = {\n    state: \"PlayersShortage\",\n    players: [_.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer),\n        _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer),\n        _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer)],\n    numPlayers: 0,\n    btnIdx: -1,\n    whoseTurn: -1,\n    numAllin: 0,\n    numActive: 0,\n    lastAggressor: -1,\n    lastAggressorOfPrevRound: -1,\n    numBet: -1,\n    lastStraddler: -1,\n    canStraddle: false,\n    prev: undefined\n};\nwindow.PlayersDictionary = JSON.parse(localStorage.getItem('players') ?? '{}') as LocalStoragePlayersDictionary;\nwindow.PlayersDictionaryLastLoadedTime = Date.now();\n\nfunction RootErrorBoundary() {\n    const [errorResolved, setErrorResolved] = useState(true);\n    return (\n        <ErrorBoundary FallbackComponent={ErrorFallback} onReset={() => {\n            setErrorResolved(false);\n        }}>\n            <App errorResolved={errorResolved} resolveError={() => setErrorResolved(true)}/>\n        </ErrorBoundary>\n    );\n}\n\nexport default RootErrorBoundary;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RootErrorBoundary from './RootErrorBoundary';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RootErrorBoundary />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}