{"version":3,"sources":["components/ActionButtons/ActionButtons.tsx","Types.ts","components/MetricCell/MetricCell.tsx","components/PlayerMetrics/PlayerMetrics.tsx","components/SortableTbodyWrapper/SortableTableWrapper.js","components/Page/Page.tsx","PokerLogic.ts","App.tsx","components/ErrorFallback/ErrorFallback.tsx","RootErrorBoundary.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionButtons","props","className","Button","canCheck","onClick","onClickFold","onClickCheck","onClickCall","canBet","onClickBet","onClickRaise","canStraddle","onClickBack","onClickShortAllin","onClickBetAllin","onClickRaiseAllin","onClickStraddle","undefined","OrderOfStats","NamesOfPosition","MetricCell","fraction","value","Math","round","numerator","denominator","Table","Cell","isNaN","PlayerMetrics","Row","player","status","folded","myTurn","info","name","id","position","AddPlayer","MoveBtn","erasable","ErasePlayer","map","key","stats","get","toString","SortableCont","SortableContainer","children","SortableItem","SortableElement","MyTable","celled","unstackable","Header","HeaderCell","metric","onSortEnd","axis","lockAxis","lockToContainerEdges","lockOffset","useDragHandle","state","pressDelay","index","players","whoseTurn","Page","useModal","preventScroll","Modal","open","close","useState","addPlayerId","setAddPlayerId","addPlayerName","setAddPlayerName","Input","autoFocus","type","placeholder","onChange","e","target","StartNextHand","Action","Undo","Action_Straddle","Showdown","FindNextExistingPlayer","currentPlayerIdx","includeNewPlayer","i","SetPosition","btnIdx","numPlayers","console","log","cnt","idx","FinalizeHands","obj","NextPlayer","includeAllin","lastAggressor","actioned","allin","InitializeBeforeBettingRound","isShowdown","lastAggressorOfPrevRound","numBet","GotoNextBettingRound","_","lodash","App","defaultStatsMap","Map","set","cloneDeep","window","global_AppState","setState","errorResolved","prev","cpy","btnStraddle","pStatus","lastStraddler","numActive","numAllin","InitializeBeforePreflop","actionType","current_player","metrics","firstAction","actiontype","bb","bbIsLastStraddler","fold","check","call","betRaise","UpdateStatsPreflop","CBed","isLastAgressorOfPrevRound","UpdateStatsFlop","UpdateStatsRiver","result","UpdateStatsShowdown","oldIndex","newIndex","arrayMoveMutable","resolveError","JSON","stringify","ErrorFallback","error","resetErrorBoundary","defaultPlayer","memo","RootErrorBoundary","setErrorResolved","FallbackComponent","onReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ae31919.chunk.js","sourcesContent":["import {VFC} from 'react';\nimport {Button} from 'semantic-ui-react';\n\ntype Props = {\n    canCheck: boolean;\n    canBet: boolean; // レイズではなくベットが可能である(numBet==0の場合true)\n    canStraddle: boolean;\n    onClickFold: () => void;\n    onClickCheck: () => void;\n    onClickCall: () => void;\n    onClickBet: () => void;\n    onClickRaise: () => void;\n    onClickBack: () => void;\n    onClickShortAllin: () => void;\n    onClickBetAllin: () => void;\n    onClickRaiseAllin: () => void;\n    onClickStraddle: () => void;\n}\n\nconst ActionButtons: VFC<Props> = (props) => {\n    return (\n        <>\n            <div className=\"ui three buttons\">\n                <Button className={\"ui \" + (props.canCheck ? \"basic\" : \"\") + \" blue button\"}\n                        onClick={props.onClickFold}>Fold</Button>\n                <Button className={\"ui \" + (props.canCheck ? \"olive\" : \"green\") + \" button\"}\n                        onClick={props.canCheck ? props.onClickCheck : props.onClickCall}>{props.canCheck ? \"Check\" : \"Call\"}</Button>\n                <Button className={\"ui \" + (props.canBet ? \"orange\" : \"red\") + \" button\"}\n                        onClick={props.canBet ? props.onClickBet : props.onClickRaise}>{props.canBet ? \"Bet\" : \"Raise\"}</Button>\n            </div>\n            <div className={props.canStraddle ? \"ui four buttons\" : \"ui three buttons\"}>\n                <Button className=\"ui black button\" onClick={props.onClickBack}>↩︎Back</Button>\n                {props.canCheck ? <Button/> :\n                    <Button className=\"ui violet button\" onClick={props.onClickShortAllin}>ShortAllin</Button>}\n                <Button className=\"ui purple button\"\n                        onClick={props.canBet ? props.onClickBetAllin : props.onClickRaiseAllin}>{props.canCheck ? \"AllIn\" : \"RaiseAllIn\"}</Button>\n                {props.canStraddle ?\n                    <Button className=\"ui pink button\" onClick={props.onClickStraddle}>Straddle</Button> : undefined}\n            </div>\n        </>\n    );\n};\n\nexport default ActionButtons;","export type Fraction = {\n    numerator: number\n    denominator: number\n}\n\nexport type PokerPosition = \"EMPTY\" | \"NEW\" | \"BB\" | \"SB\" | \"BTN\" | \"CO\" | \"HJ\" | \"LJ\" | \"+2\" | \"+1\" | \"UTG\";\nexport type PokerStats = \"VPIP\" | \"PFR\" | \"3B\" | \"F3B\" | \"CB\" | \"FCB\" | \"WT\" | \"W$\" | \"BBD\";\nexport const OrderOfStats: Array<PokerStats> = [\"VPIP\", \"PFR\", \"3B\", \"F3B\", \"CB\", \"FCB\", \"WT\", \"W$\", \"BBD\"];\nexport type StatsMap = Map<PokerStats, Fraction>;\nexport const NamesOfPosition: PokerPosition[][] = [ // NamesOfPosition[プレイヤー数n][ボタンから数えて何番目?([0,n))]\n    [], // プレイヤー数0\n    [], // プレイヤー数1\n    [\"SB\", \"BB\"], // プレイヤー数2\n    [\"BTN\", \"SB\", \"BB\"], // プレイヤー数3\n    [\"BTN\", \"SB\", \"BB\", \"UTG\"], // プレイヤー数4\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"CO\"], // プレイヤー数5\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"HJ\", \"CO\"], // プレイヤー数6\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"LJ\", \"HJ\", \"CO\"], // プレイヤー数7\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"+1\", \"LJ\", \"HJ\", \"CO\"], // プレイヤー数8\n    [\"BTN\", \"SB\", \"BB\", \"UTG\", \"+1\", \"+2\", \"LJ\", \"HJ\", \"CO\"] // プレイヤー数9\n];\nexport type BettingRound = \"PlayersShortage\" | \"BetweenHands\" | \"Preflop\" | \"Flop\" | \"Turn\" | \"River\" | \"Showdown\";\nexport type PokerAction = \"Fold\" | \"Check\" | \"Bet\" | \"Call\" | \"Raise\" | \"BetAllin\" | \"ShortAllin\" | \"RaiseAllin\";\nexport type PokerResult = \"Win\" | \"Lose\";\nexport const MAX_PLAYERS = 9;\n\n// 保存可能なプレイヤーの状態。\n// 名前、メモ、スタッツ\nexport type PlayerInfo = {\n    name: string;\n    memo: string;\n    stats: StatsMap;\n}\n\n// 保存されることのないプレイヤーのプレイ中の状態\nexport type PlayerStatus = {\n    position: PokerPosition;\n    folded: boolean;\n    allin: boolean;\n    actioned: boolean; // 現在のべっティングラウンドでアクションしたか\n}\n\nexport type PlayerAllInfo = {\n    info: PlayerInfo;\n    status: PlayerStatus;\n}\n\n// 9-max用\nexport type PlayerAllInfo9 = [PlayerAllInfo, PlayerAllInfo, PlayerAllInfo, PlayerAllInfo, PlayerAllInfo, PlayerAllInfo, PlayerAllInfo, PlayerAllInfo, PlayerAllInfo];\n\nexport type AppState = {\n    state: BettingRound;\n    players: PlayerAllInfo9;\n    numPlayers: number;\n    btnIdx: number;\n    whoseTurn: number;\n    numAllin: number;\n    numActive: number;\n    lastAggressor: number;\n    lastAggressorOfPrevRound: number;\n    numBet: number; // 1bet, 2bet, 3bet,4bet...\n    lastStraddler: number; // 最後にストラドルした人。canCheckの判定に用いる。初期値はBB(ただしBTNストラドルならBTN)のプレイヤー。\n    canStraddle: boolean; // ストラドル以外のアクションが行われた時点でfalseになる。\n    prev?: AppState;\n}\n","import {VFC} from 'react';\nimport {Table} from 'semantic-ui-react';\nimport './MetricCell.css'\nimport {Fraction} from \"../../Types\";\n\nconst MetricCell: VFC<Fraction> = (fraction) => {\n    const value = Math.round(fraction.numerator / fraction.denominator * 100);\n    return (\n        <Table.Cell className=\"metric-cell\">\n            <div className=\"metric-value\">{isNaN(value) ? \"-\" : value}</div>\n            <div className=\"metric-denominator\">({fraction.denominator})</div>\n        </Table.Cell>\n    );\n};\n\nexport default MetricCell;","import {VFC} from 'react';\nimport {Table} from 'semantic-ui-react';\nimport './PlayerMetrics.css';\nimport {OrderOfStats, PlayerAllInfo} from '../../Types';\nimport MetricCell from \"../MetricCell/MetricCell\";\n\ntype Props = {\n    id: number;\n    player: PlayerAllInfo;\n    myTurn: boolean;\n    AddPlayer?: () => void;\n    MoveBtn?: () => void;\n    erasable: boolean;\n    ErasePlayer?: () => void;\n}\n\nconst PlayerMetrics: VFC<Props> = (props) => {\n    return (\n        <Table.Row\n            className={(props.player.status.folded ? \"center aligned active row\"/*activeは灰色*/ :\n                (props.myTurn ? \"center aligned positive row\" : \"center aligned row\"))}>\n            <Table.Cell\n                className={\"table-first-cell\" + (props.player.info.name === \"hero\" ? \" table-first-cell-hero\" : \"\")}>\n                <div>{props.id}</div>\n                <div className=\"table-player-name\">{props.player.info.name}</div>\n            </Table.Cell>\n            {props.player.status.position === \"EMPTY\" ?\n                // 空席ならタップでプレイヤー追加、そうでないならタップでボタン移動\n                <Table.Cell className=\"table-second-cell\" onClick={props.AddPlayer}><i\n                    className=\"user plus icon\"/></Table.Cell>\n                :\n                <Table.Cell className=\"table-second-cell\"\n                            onClick={props.MoveBtn}>{props.player.status.position}</Table.Cell>\n            }\n            {props.player.status.position !== \"EMPTY\" && props.erasable ?\n                //空席でないかつ削除可能期間ならプレイヤー削除ボタン。それ以外なら空欄\n                <Table.Cell className=\"table-third-cell\" onClick={props.ErasePlayer}><i\n                    className=\"user times icon\"/>\n                </Table.Cell>\n                : <Table.Cell className=\"table-third-cell\"/>\n            }\n\n            {OrderOfStats.map((key) => (\n                props.player.status.position !== \"EMPTY\" ?\n                    <MetricCell key={props.id.toString() + key} {...props.player.info.stats.get(key) ?? {\n                        numerator: -1,\n                        denominator: -1\n                    }}/>\n                    : <Table.Cell key={props.id.toString() + key} className=\"table-cell\"/>\n            ))}\n        </Table.Row>\n    );\n};\n\nexport default PlayerMetrics;","import {SortableContainer, SortableElement} from \"react-sortable-hoc\";\nimport {Table} from \"semantic-ui-react\"\nimport \"./SortableTableWrapper.css\"\nimport {OrderOfStats} from \"../../Types\";\nimport PlayerMetrics from \"../PlayerMetrics/PlayerMetrics\";\n\nconst SortableCont = SortableContainer(({children}) => {\n    return <tbody>{children}</tbody>;\n});\n\nconst SortableItem = SortableElement((props) => <PlayerMetrics id={props.id} player={props.player} myTurn={props.myTurn}\n                                                               AddPlayer={props.AddPlayer} MoveBtn={props.MoveBtn}\n                                                               erasable={props.erasable}\n                                                               ErasePlayer={props.ErasePlayer}/>);\n\nconst MyTable = (props) => {\n    return (\n        <Table className=\".table\" celled unstackable>\n            <Table.Header>\n                <Table.Row className=\"ui center aligned\">\n                    <Table.HeaderCell className=\"header-cell\"/>\n                    <Table.HeaderCell className=\"header-cell\"/>\n                    <Table.HeaderCell className=\"header-cell\"/>\n                    {\n                        OrderOfStats.map((metric) => (\n                            <Table.HeaderCell key={metric} className=\"header-cell\">{metric}</Table.HeaderCell>\n                        ))\n                    }\n                </Table.Row>\n            </Table.Header>\n            <SortableCont\n                onSortEnd={props.onSortEnd}\n                axis=\"y\"\n                lockAxis=\"y\"\n                lockToContainerEdges={true}\n                lockOffset={[\"30%\", \"50%\"]}\n                useDragHandle={!(props.state === \"BetweenHands\" || props.state === \"PlayersShortage\") /*ハンド間以外はuseDragHandleをtrueにしてドラッグ不可にする*/}\n                pressDelay={200}\n            >\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((id) => (\n                    <SortableItem\n                        key={`item-${id}`}\n                        index={id}\n                        id={id + 1}\n                        player={props.players[id]}\n                        myTurn={props.whoseTurn === id}\n                        AddPlayer={() => props.AddPlayer(id)}\n                        MoveBtn={() => props.MoveBtn(id)}\n                        erasable={(props.state === \"BetweenHands\" || props.state === \"PlayersShortage\") && props.players[id].status.position !== \"BTN\"}\n                        ErasePlayer={() => props.ErasePlayer(id)}\n                    />\n                ))}\n            </SortableCont>\n        </Table>\n    );\n};\n\nexport default MyTable;\n","import {VFC, useState} from 'react';\nimport {Button, Input} from 'semantic-ui-react';\nimport {useModal} from 'react-hooks-use-modal';\nimport './Page.css';\nimport {\n    BettingRound,\n    PokerAction,\n    PokerResult, PlayerAllInfo9\n} from '../../Types'\nimport ActionButtons from \"../ActionButtons/ActionButtons\";\nimport SortableTbodyWrapper from \"../SortableTbodyWrapper/SortableTableWrapper.js\";\n\ntype Props = {\n    players: PlayerAllInfo9;\n    AddPlayer: (id: number, name: string) => void;\n    MoveBtn: (id: number) => void;\n    state: BettingRound;\n    StartNextHand: (btnStraddle: boolean) => void;\n    Action: (actiontype: PokerAction) => void;\n    canCheck: boolean;\n    Undo: () => void;\n    whoseTurn: number;\n    Showdown: (result: PokerResult) => void;\n    ErasePlayer: (id: number) => void;\n    onSortEnd: (oldIndex: number, newIndex: number) => void;\n    canBet: boolean;\n    canStraddle: boolean;\n    Action_Straddle: () => void;\n}\n\nconst Page: VFC<Props> = (props) => {\n    const [Modal, open, close, isOpen] = useModal('root', {\n        preventScroll: true,\n    });\n    const [addPlayerId, setAddPlayerId] = useState(-1);\n    const [addPlayerName, setAddPlayerName] = useState(\"\");\n\n    return (\n        <>\n            <Modal>\n                <div className=\"ui input\">\n                    <Input autoFocus type=\"text\" placeholder=\"player name...\" className=\"modal-textbox\"\n                           control-id=\"CID-1\" onChange={e => setAddPlayerName(e.target.value)}/>\n                </div>\n                <div className=\"ui two buttons\">\n                    <Button onClick={() => {\n                        props.AddPlayer(addPlayerId, addPlayerName);\n                        close();\n                    }}>Add</Button>\n                    <Button onClick={close}>Cancel</Button>\n                </div>\n            </Modal>\n            <SortableTbodyWrapper players={props.players}\n                                  whoseTurn={props.whoseTurn}\n                                  AddPlayer={(id: number) => {\n                                      setAddPlayerId(id);\n                                      setAddPlayerName(\"\");\n                                      open();\n                                  }}\n                                  MoveBtn={props.MoveBtn}\n                                  state={props.state}\n                                  ErasePlayer={props.ErasePlayer}\n                                  onSortEnd={props.onSortEnd}/>\n\n            {props.state === \"PlayersShortage\" ?\n                <h4>At least 3 players are needed.</h4>\n                : undefined\n            }\n            {props.state === \"BetweenHands\" ?\n                <>\n                    <h4>Move the dealer button by tapping the position of a player if necessary.</h4>\n                    <Button onClick={() => {\n                        props.StartNextHand(false)\n                    }}>Start next hand</Button>\n                    <Button onClick={() => {\n                        props.StartNextHand(true)\n                    }}>Start next hand(BTN Straddle)</Button>\n                </>\n                : undefined\n            }\n            {((props.state === \"Preflop\") || (props.state === \"Flop\") || (props.state === \"Turn\") || (props.state === \"River\")) ?\n                <>\n                    <h4>{props.state}</h4>\n                    <ActionButtons canCheck={props.canCheck} onClickFold={() => props.Action(\"Fold\")}\n                                   onClickCheck={() => props.Action(\"Check\")} onClickCall={() => props.Action(\"Call\")}\n                                   onClickBet={() => props.Action(\"Bet\")} onClickRaise={() => props.Action(\"Raise\")}\n                                   onClickBack={props.Undo} onClickShortAllin={() => props.Action(\"ShortAllin\")}\n                                   onClickBetAllin={() => props.Action(\"BetAllin\")}\n                                   onClickRaiseAllin={() => props.Action(\"RaiseAllin\")}\n                                   canStraddle={props.canStraddle} canBet={props.canBet}\n                                   onClickStraddle={props.Action_Straddle}></ActionButtons>\n                </>\n                : undefined\n            }\n            {props.state === \"Showdown\" ?\n                <>\n                    <h4>{props.state}</h4>\n                    <div className=\"ui three buttons\">\n                        <Button className=\"ui black button\" onClick={props.Undo}>︎︎↩︎Back</Button>\n                        <Button className=\"ui yellow button\" onClick={() => props.Showdown(\"Win\")}>Win</Button>\n                        <Button className=\"ui blue button\" onClick={() => props.Showdown(\"Lose\")}>Lose</Button>\n                    </div>\n                </>\n                : undefined\n            }\n        </>\n    );\n};\n\nexport default Page;","import {\n    NamesOfPosition,\n    MAX_PLAYERS,\n    AppState,\n    StatsMap,\n    PokerAction,\n    PokerResult,\n    PlayerAllInfo9\n} from './Types'\n\n// currenPlayerの次の空席でないプレイヤーを探す。\n// EMPTYは検索対象外\n// includeNewPlayerがtrueならポジションがNEWのプレイヤーも検索対象となる\n// currentPlayer以外検索対象でないならcurrentPlayerが返り値となる\n// currentPlayerも含めて誰も検索対象でないなら-1が返り値となる\nconst FindNextExistingPlayer = (currentPlayerIdx: number, players: PlayerAllInfo9, includeNewPlayer: boolean): number => {\n    if (currentPlayerIdx < 0 || MAX_PLAYERS <= currentPlayerIdx) {\n        return -1;\n    }\n    for (let i = currentPlayerIdx + 1; i < MAX_PLAYERS; ++i) {\n        if (players[i].status.position === \"EMPTY\") {\n            continue;\n        }\n        if (!includeNewPlayer && players[i].status.position === \"NEW\") {\n            continue;\n        }\n        return i;\n    }\n    // 返り値がcurrentPlayerとなる場合もあるため<=で正しい\n    for (let i = 0; i <= currentPlayerIdx; ++i) {\n        if (players[i].status.position === \"EMPTY\") {\n            continue;\n        }\n        if (!includeNewPlayer && players[i].status.position === \"NEW\") {\n            continue;\n        }\n        return i;\n    }\n    return -1;\n}\n\n// BTNのプレイヤーのインデックスを指定すると、各プレイヤーのポジションを埋める\n// プレイヤーの人数に応じて適切なポジション名が選択される\nexport const SetPosition = (players: PlayerAllInfo9, btnIdx: number, numPlayers: number): void => {\n    console.log(\"SetPosition\");\n    let cnt = 0;\n    for (let idx = btnIdx; cnt < numPlayers; idx = FindNextExistingPlayer(idx, players, true)) {\n        if (cnt !== 0 && idx === btnIdx) {\n            console.log(\"error: numPlayers is wrong. numPlayers is \" + numPlayers + \" cnt is \" + cnt);\n        }\n        if (idx === -1) {\n            console.log(\"error: numPlayers is wrong. numPlayers is \" + numPlayers + \" cnt is \" + cnt);\n            return;\n        }\n        players[idx].status.position = NamesOfPosition[numPlayers][cnt++];\n    }\n}\n\nexport const NextBtn = (players: PlayerAllInfo9, btnIdx: number): number => {\n    console.log(\"NextBtn\");\n    return FindNextExistingPlayer(btnIdx, players, true);\n}\n\nexport const FinalizeHands = (obj: AppState): void => {\n    console.log(\"Finalizehands\");\n    obj.state = \"BetweenHands\";\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        obj.players[i].status.folded = false; // foldしていたプレイヤーが灰色になっているので表示を戻す。\n    }\n    obj.btnIdx = NextBtn(obj.players, obj.btnIdx); // ボタン移動\n    SetPosition(obj.players, obj.btnIdx, obj.numPlayers); // ボタン移動\n    obj.whoseTurn = -1; // 緑色で表示する行をなくすため\n    console.log(\"Finalizehands end\")\n}\n\n// folded, allind, actionedを参照し、このべっティングラウンドで次にアクションすべきプレイヤーを決定する\n// includeAllin: オールインしたプレイヤーが選ばれる可能性があるか。ショーダウン時のみtrueにすべき。\nexport const NextPlayer = (currentPlayerIdx: number, obj: AppState, includeAllin: boolean): number => {\n    console.log(\"NextPlayer\");\n    for (let i = FindNextExistingPlayer(currentPlayerIdx, obj.players, false)\n        ; i !== currentPlayerIdx && i !== -1\n        ; i = FindNextExistingPlayer(i, obj.players, false)) {\n        // return -1の判定とcontinueの判定を入れ替えると、オールインしたプレイヤーがラストアグレッサーだった場合にバグる\n        if (obj.lastAggressor === i) {\n            console.log(\"NextPlayer is -1. obj.lastAggressor === \" + i);\n            return -1;\n        }\n        if (obj.lastAggressor === -1 && obj.players[i].status.actioned) {\n            console.log(\"NextPlayer is -1. obj.actioned[\" + i + \"]\");\n            return -1;\n        }\n        if (obj.players[i].status.folded) {\n            continue;\n        }\n        if (!includeAllin && obj.players[i].status.allin) {\n            continue;\n        }\n        return i;\n    }\n    console.log(\"NextPlayer is -1.\");\n    return -1;\n}\n\n// べっティングラウンドを跨ぐ際にリセットすべき、actioned, whoseTurn, lastAggressor, lastAgressorOfPrevRound, numBetを初期値にセットする。\n// stateは変更しない\n// isShowdownがtrueならオールインしている人がwhoseTurnになる可能性がある\nexport const InitializeBeforeBettingRound = (obj: AppState, isShowdown: boolean): void => {\n    console.log(\"InitializeBeforeBettingRound\");\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        obj.players[i].status.actioned = false;\n    }\n    obj.lastAggressorOfPrevRound = obj.lastAggressor;\n    obj.lastAggressor = -1;\n    obj.numBet = 0;\n    obj.whoseTurn = NextPlayer(obj.btnIdx, obj, isShowdown); // ボタンの次の人。NextPlayerがlastAggressorに依存しているのでobj.lastAggressorを先に初期化。\n}\n\n// InitializeBeforeBettingRoundに加えてfolded,allind,whoseTurn,numAllin,numActive,lastAgressorOfPrevRound,numBetに適切な値をセットする必要がある\n// BBのプレイヤーをlastStraddlerにし、canStraddleをtrueにする。BTNストラドルの場合はこの関数を終えた後追加の処理が必要がある.\nexport const InitializeBeforePreflop = (obj: AppState): void => {\n    // position,btnIdxはFinalizeHandsやMoveBtnで正しくセットされている。\n    console.log(\"InitializeBeforePreflop\");\n    obj.state = \"Preflop\";\n    InitializeBeforeBettingRound(obj, false); // whoseTurn, lastAgressorOfPrevRound, numBetに正しくない値がセットされる。\n    for (let i = 0; i < MAX_PLAYERS; ++i) {\n        const pStatus = obj.players[i].status;\n        pStatus.folded = (pStatus.position === \"EMPTY\"); // 空席を灰色表示するため\n        pStatus.allin = false;\n        if (obj.numPlayers === 3 && pStatus.position === \"BTN\") {\n            obj.whoseTurn = i;\n        } else if (obj.numPlayers >= 4 && pStatus.position === \"UTG\") {\n            obj.whoseTurn = i;\n        }\n        if (pStatus.position === \"BB\") {\n            obj.lastStraddler = i;\n        }\n    }\n    obj.numActive = obj.numPlayers;\n    obj.numAllin = 0;\n    obj.lastAggressorOfPrevRound = -1;\n    obj.numBet = 1; // BB\n    obj.canStraddle = true;\n}\n\nexport const GotoNextBettingRound = (obj: AppState): void => {\n    console.log(\"ToNextBettingRound\");\n    if (obj.state === \"Preflop\") obj.state = \"Flop\";\n    else if (obj.state === \"Flop\") obj.state = \"Turn\";\n    else if (obj.state === \"Turn\") obj.state = \"River\";\n    else if (obj.state === \"River\") obj.state = \"Showdown\";\n    else {\n        console.log(\"error: ToNextBettingRound called but the current round is \" + obj.state);\n        return;\n    }\n    InitializeBeforeBettingRound(obj, obj.state === \"Showdown\");\n}\n\n// プリフロップのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// firstAction: 該当プレイヤーのこのラウンドでの初めてのアクションか\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\n// bbIsLastStraddlerがfalseの場合、BBディフェンス率は更新しない。\nexport const UpdateStatsPreflop = (metrics: StatsMap, numBet: number, firstAction: boolean, actiontype: PokerAction, bb: boolean, bbIsLastStraddler: boolean): void => {\n    const fold = (actiontype === \"Fold\");\n    const check = (actiontype === \"Check\");\n    const call = (actiontype === \"Call\" || actiontype === \"ShortAllin\");\n    const betRaise = (actiontype === \"Bet\" || actiontype === \"Raise\" || actiontype === \"BetAllin\" || actiontype === \"RaiseAllin\");\n    // VPIP PFR 3B BBD: プリフロの最初のアクションを集計\n    // F3B: プリフロの二回目以降のアクションを集計\n    if (firstAction) {\n        // 最初のアクション\n        // チェック(lastStraddler)の場合、増減なし\n        if (!check) {\n            metrics.get(\"VPIP\")!.denominator += 1;\n        }\n        if (call || betRaise) {\n            metrics.get(\"VPIP\")!.numerator += 1;\n        }\n        metrics.get(\"PFR\")!.denominator += 1;\n        if (betRaise) {\n            metrics.get(\"PFR\")!.numerator += 1;\n        }\n        if (numBet === 2) {\n            metrics.get(\"3B\")!.denominator += 1;\n            if (betRaise) metrics.get(\"3B\")!.numerator += 1;\n        }\n        if (bb && bbIsLastStraddler && !check) { // 他の人がストラドルしている場合と、チェックの場合は分母にも分子にもカウントしない\n            metrics.get(\"BBD\")!.denominator += 1;\n            if (call || betRaise) metrics.get(\"BBD\")!.numerator += 1;\n        }\n    } else if (numBet === 3) {\n        // 2回目以降かつ3betが入っている場合のアクション\n        metrics.get(\"F3B\")!.denominator += 1;\n        if (fold) metrics.get(\"F3B\")!.numerator += 1;\n    }\n}\n\n// フロップのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// isLastAggressorOfPrevRound: このプレイヤーはプリフロのラストアグレッサーか?\n// CBed: フロップのラストアグレッサー==プリフロのラストアグレッサーならtrue。numBet!=1の時は未定義で構わない。\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsFlop = (metrics: StatsMap, numBet: number, CBed: boolean, isLastAgressorOfPrevRound: boolean, actiontype: PokerAction): void => {\n    const fold = (actiontype === \"Fold\");\n    const betRaise = (actiontype === \"Bet\" || actiontype === \"Raise\" || actiontype === \"BetAllin\" || actiontype === \"RaiseAllin\");\n    // CB, FCBを更新\n    // フロップ以降にフォールドした人はWTSDの分母加算\n    if (isLastAgressorOfPrevRound && numBet === 0) {\n        metrics.get(\"CB\")!.denominator += 1;\n        if (betRaise) metrics.get(\"CB\")!.numerator += 1;\n    }\n    if (CBed && numBet === 1) {\n        metrics.get(\"FCB\")!.denominator += 1;\n        if (fold) metrics.get(\"FCB\")!.numerator += 1;\n    }\n    if (fold) {\n        metrics.get(\"WT\")!.denominator += 1;\n    }\n}\n\n// ターンのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsTurn = (metrics: StatsMap, actiontype: PokerAction): void => {\n    if (actiontype === \"Fold\") {\n        metrics.get(\"WT\")!.denominator += 1;\n    }\n}\n\n// リバーのアクションに応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsRiver = (metrics: StatsMap, actiontype: PokerAction): void => {\n    if (actiontype === \"Fold\") {\n        metrics.get(\"WT\")!.denominator += 1;\n    }\n}\n\n// ショーダウンの結果に応じてそのプレイヤーのスタッツを更新する\n// 該当プレイヤー以外のスタッツは更新しない\n// もっといい書き方があるかもしれないが、とりあえずApp.tsxから分離。\nexport const UpdateStatsShowdown = (metrics: StatsMap, result: PokerResult): void => {\n    metrics.get(\"WT\")!.denominator += 1;\n    metrics.get(\"WT\")!.numerator += 1;\n    metrics.get(\"W$\")!.denominator += 1;\n    if (result === \"Win\") {\n        metrics.get(\"W$\")!.numerator += 1;\n    }\n}\n","import React from 'react';\nimport * as lodash from 'lodash';\nimport './App.css';\nimport Page from \"./components/Page/Page\";\nimport {\n    StatsMap,\n    OrderOfStats,\n    PokerAction,\n    PokerResult,\n    MAX_PLAYERS,\n    AppState\n} from \"./Types\"\nimport {\n    SetPosition,\n    FinalizeHands,\n    InitializeBeforePreflop,\n    NextPlayer,\n    GotoNextBettingRound,\n    UpdateStatsPreflop,\n    UpdateStatsFlop,\n    UpdateStatsTurn,\n    UpdateStatsRiver,\n    UpdateStatsShowdown\n} from \"./PokerLogic\"\nimport {\n    useState\n} from 'react';\nimport {arrayMoveMutable} from 'array-move';\nimport {Button} from \"semantic-ui-react\";\n\nconst _ = lodash;\ntype Props = {\n    errorResolved: boolean;\n    resolveError: () => void; // errorResolvedがfalseなら必須\n};\n\nfunction App(props: Props) {\n    const defaultStatsMap: StatsMap = new Map();\n    OrderOfStats.map((metric) => (defaultStatsMap.set(metric, {numerator: 0, denominator: 0})));\n    const [state, setState] = useState<AppState>(_.cloneDeep(window.global_AppState));\n\n    const MoveBtn = (id: number): void => {\n        console.log(\"MoveBtn\");\n        setState((prev) => {\n            try {\n                if (prev.state !== \"BetweenHands\") {\n                    // ボタンを動かせるのはハンド間のみ\n                    return prev;\n                }\n                if (prev.players[id].status.position[id] === \"EMPTY\") {\n                    // 空席にはボタンを置けない(デッドボタン未対応)\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                console.log(\"c\");\n                cpy.btnIdx = id;\n                SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers);\n                return cpy;\n            } catch {\n                return prev;\n            }\n        })\n    }\n    const AddPlayer = (id: number, name: string): void => {\n        console.log(\"AddPlayer\");\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                cpy.numPlayers += 1;\n                cpy.players[id].status.position = \"NEW\";\n                cpy.players[id].info.name = name;\n                cpy.players[id].info.stats = _.cloneDeep(defaultStatsMap);\n\n                if (cpy.state !== \"BetweenHands\" && cpy.state !== \"PlayersShortage\") {\n                    return cpy; // ハンド間以外はNEWのまま置いておく\n                }\n\n                if (cpy.numPlayers === 3) {\n                    // assert(cpy.state == \"PlayersShortage\");\n                    cpy.btnIdx = id;\n                    FinalizeHands(cpy); // 人数不足から脱却。別のメソッドを用意した方が分かりやすいかもしれない。\n                } else {\n                    SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers); // ハンド間なら即時反映\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    };\n    const ErasePlayer = (id: number): void => {\n        console.log(\"ErasePlayer\");\n        setState((prev) => {\n            try {\n                if (prev.players[id].status.position === \"BTN\") {\n                    // ボタンは削除できない\n                    return prev;\n                }\n                if (prev.state !== \"BetweenHands\" && prev.state !== \"PlayersShortage\") {\n                    // 削除できるのはハンド間のみ\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                window.global_AppState = cpy;\n                cpy.prev = prev;\n                cpy.numPlayers -= 1;\n                cpy.players[id].status.position = \"EMPTY\";\n                cpy.players[id].info.name = \"\";\n\n                if (cpy.numPlayers === 2) {\n                    cpy.btnIdx = id;\n                    for (let i = 0; i < MAX_PLAYERS; ++i) {\n                        if (cpy.players[i].status.position !== \"EMPTY\") cpy.players[i].status.position = \"NEW\";\n                    }\n                    cpy.state = \"PlayersShortage\" // 人数不足\n                } else {\n                    // ポジション修正\n                    SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers);\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const StartNextHand = (btnStraddle: boolean): void => {\n        console.log(\"StartNextHand\");\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                window.global_AppState = cpy;\n                cpy.prev = prev;\n                prev.prev = undefined; // これより前に戻れないのでガベージコレクタに回収させる\n                InitializeBeforePreflop(cpy);\n                if (btnStraddle) {\n                    // lastStraddlerをBTNのプレイヤーにする\n                    // straddle不能状態にする\n                    // プリフロップのアクションをSBから開始する\n                    cpy.lastStraddler = cpy.btnIdx;\n                    cpy.canStraddle = false;\n                    for (let i = 0; i < MAX_PLAYERS; ++i) {\n                        if (cpy.players[i].status.position === \"SB\") {\n                            cpy.whoseTurn = i;\n                        }\n                    }\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const Action_Straddle = (): void => {\n        // Actionの一部としてもいいが、関数が肥大化しているので分離する\n        // lastStraddler更新。canStraddleは引き続きtrue。次のプレイヤーへ。\n        // ただし、SBに達したらcanStraddleはfalseに変更する。\n        // actioned,numBetは更新しない。更新すべきスタッツはない。\n        console.log(\"Action_Straddle\");\n        console.log(state.whoseTurn + 1);\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                cpy.lastStraddler = cpy.whoseTurn;\n                cpy.whoseTurn = NextPlayer(cpy.whoseTurn, cpy, false);\n                if (cpy.players[cpy.whoseTurn].status.position === \"SB\") {\n                    cpy.canStraddle = false;\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        })\n    }\n    const Action = (actionType: PokerAction): void => {\n        console.log(\"Action\");\n        console.log((state.whoseTurn + 1) + actionType);\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                cpy.canStraddle = false; // ストラドル以外のあらゆるアクションでストラドル権が失われる。\n                // calculate stats\n                // 最後の一人のWTSDはここでは更新できないことに注意\n                const current_player = cpy.players[cpy.whoseTurn];\n                const stats = current_player.info.stats;\n                if (cpy.state === \"Preflop\") {\n                    UpdateStatsPreflop(stats, cpy.numBet, !current_player.status.actioned, actionType, current_player.status.position === \"BB\", cpy.players[cpy.lastStraddler]?.status.position === \"BB\" ?? false);\n                } else if (cpy.state === \"Flop\") {\n                    UpdateStatsFlop(stats, cpy.numBet, cpy.lastAggressor === cpy.lastAggressorOfPrevRound, cpy.whoseTurn === cpy.lastAggressorOfPrevRound, actionType);\n                } else if (cpy.state === \"Turn\") {\n                    UpdateStatsTurn(stats, actionType);\n                } else if (cpy.state === \"River\") {\n                    UpdateStatsRiver(stats, actionType);\n                }\n\n                current_player.status.actioned = true;\n                switch (actionType) {\n                    case \"Fold\":\n                        current_player.status.folded = true;\n                        cpy.numActive -= 1;\n                        break;\n                    case \"Check\":\n                    case \"Call\":\n                        break;\n                    case \"Bet\":\n                    case \"Raise\":\n                        cpy.lastAggressor = cpy.whoseTurn;\n                        cpy.numBet += 1;\n                        break;\n                    case \"BetAllin\":\n                    case \"RaiseAllin\":\n                        cpy.lastAggressor = cpy.whoseTurn;\n                        cpy.numAllin += 1;\n                        cpy.numActive -= 1;\n                        cpy.numBet += 1;\n                        current_player.status.allin = true;\n                        break;\n                    case \"ShortAllin\":\n                        cpy.numAllin += 1;\n                        cpy.numActive -= 1;\n                        current_player.status.allin = true;\n                        break;\n                    default:\n                        console.log(\"error: Action(\" + actionType + \")\");\n                }\n                if (cpy.numActive + cpy.numAllin === 1) {\n                    // ハンド終了。\n                    console.log(\"numActive becomes 1.\");\n                    // ショーダウンが行われないので残った一人のWTSDの分母に1加算\n                    if (cpy.state !== \"Preflop\") {\n                        for (let i = 0; i < MAX_PLAYERS; ++i) {\n                            if (cpy.players[i].status.position !== \"EMPTY\"\n                                && cpy.players[i].status.position !== \"NEW\"\n                                && !cpy.players[i].status.folded) {\n                                cpy.players[i].info.stats.get(\"WT\")!.denominator += 1;\n                            }\n                        }\n                    }\n                    FinalizeHands(cpy);\n                    return cpy;\n                } else if (cpy.numActive === 0 && cpy.numAllin >= 2) {\n                    // オールインのみのショーダウンへ\n                    cpy.state = \"River\";\n                    GotoNextBettingRound(cpy); // 専用のメソッドを作った方がわかりやすいかもしれない。\n                    return cpy;\n                } else {\n                    // ハンド継続\n                    cpy.whoseTurn = NextPlayer(cpy.whoseTurn, cpy, false);\n                    if (cpy.whoseTurn === -1 && cpy.numActive >= 2) {\n                        // 次のベッティングラウンドへ\n                        console.log(\"next round.\");\n                        GotoNextBettingRound(cpy);\n                    } else if (cpy.whoseTurn === -1 && cpy.numActive === 1) {\n                        // ショーダウンへ\n                        console.log(\"showdown\");\n                        cpy.state = \"River\";\n                        GotoNextBettingRound(cpy);\n                    }\n                    return cpy;\n                }\n            } catch {\n                return prev;\n            }\n        })\n    }\n    const Showdown = (result: PokerResult): void => {\n        console.log(\"Showdown\");\n        setState((prev) => {\n            try {\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                window.global_AppState = cpy;\n                UpdateStatsShowdown(cpy.players[cpy.whoseTurn].info.stats, result);\n                if (cpy.players[cpy.whoseTurn].status.allin) cpy.numAllin -= 1;\n                else cpy.numActive -= 1;\n                if (cpy.numActive + cpy.numAllin === 0) {\n                    FinalizeHands(cpy);\n                } else {\n                    cpy.whoseTurn = NextPlayer(cpy.whoseTurn, cpy, true);\n                }\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const Undo = (): void => {\n        setState((prev) => prev.prev ?? prev);\n    }\n    // ここのタイプ宣言は分からない\n    // プレイヤーの並べ替えが可能なのはハンド間のみ\n    // oldIndex=btnIdxならボタンをnewIndexに移動\n    // ポジション再配置\n    // 一番上の人をボタンにする。(将来的に変更したい)\n    const onSortEnd = ({oldIndex, newIndex}: any): void => {\n        console.log(\"onSortEnd \" + oldIndex + \", \" + newIndex);\n        setState((prev) => {\n            try {\n                if (!(prev.state === \"PlayersShortage\" || prev.state === \"BetweenHands\")) {\n                    return prev;\n                }\n                let cpy = _.cloneDeep(prev);\n                cpy.prev = prev;\n                arrayMoveMutable(cpy.players, oldIndex, newIndex);\n                for (let i = 0; i < MAX_PLAYERS; ++i) {\n                    if (cpy.players[i].status.position !== \"EMPTY\") {\n                        cpy.btnIdx = i;\n                        break;\n                    }\n                }\n                SetPosition(cpy.players, cpy.btnIdx, cpy.numPlayers); // ポジション修正\n                return cpy;\n            } catch {\n                return prev;\n            }\n        });\n    }\n    const onReset = (): void => {\n        window.global_AppState = (window.global_AppState.prev ?? window.global_AppState);\n        props.resolveError();\n    };\n    return (\n        <>\n            <h4>Live HUD ver 2.2.4 dev</h4>\n            {props.errorResolved ?\n                // エラーではない\n                <Page key={\"root-page-key\"} AddPlayer={AddPlayer} MoveBtn={MoveBtn} state={state.state}\n                      StartNextHand={StartNextHand}\n                      Action={Action} Undo={Undo} whoseTurn={state.whoseTurn}\n                      canCheck={(state.numBet === 0)\n                          || (state.state === \"Preflop\" && state.whoseTurn === state.lastStraddler && state.numBet === 1)}\n                      Showdown={Showdown} ErasePlayer={ErasePlayer} players={state.players} onSortEnd={onSortEnd}\n                      canStraddle={state.canStraddle} canBet={state.numBet === 0} Action_Straddle={Action_Straddle}/>\n                :\n                //エラー\n                <>\n                    <p>エラーが発生しました。下記の内容を開発者にお知らせください。</p>\n                    <Button onClick={onReset}>復帰</Button>\n                    <p>State0:<br/>{JSON.stringify(window.global_AppState)}</p>\n                </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","import {FallbackProps} from 'react-error-boundary'\n\nfunction ErrorFallback({error, resetErrorBoundary}: FallbackProps) {\n    return (\n        <div>\n            <h2>エラーが発生しました。次の画面で詳細が表示されます。以下の内容と次の画面で表示される内容を開発者にお知らせください。</h2>\n            <button onClick={resetErrorBoundary}>\n                次へ\n            </button>\n        </div>\n    )\n}\n\nexport default ErrorFallback\n","import React, {useState} from 'react';\nimport {ErrorBoundary} from 'react-error-boundary'\nimport App from './App';\nimport ErrorFallback from \"./components/ErrorFallback/ErrorFallback\"\nimport {AppState, OrderOfStats, PlayerAllInfo, StatsMap} from \"./Types\";\nimport * as lodash from \"lodash\";\n\ndeclare global {\n    interface Window {\n        global_AppState: AppState\n    }\n}\nconst _ = lodash;\nconst defaultStatsMap: StatsMap = new Map();\nOrderOfStats.map((metric) => (defaultStatsMap.set(metric, {numerator: 0, denominator: 0})));\nconst defaultPlayer: PlayerAllInfo = {\n    info: {name: \"\", memo: \"\", stats: defaultStatsMap},\n    status: {position: \"EMPTY\", folded: false, allin: false, actioned: false}\n};\nwindow.global_AppState = {\n    state: \"PlayersShortage\",\n    players: [_.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer),\n        _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer),\n        _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer), _.cloneDeep(defaultPlayer)],\n    numPlayers: 0,\n    btnIdx: -1,\n    whoseTurn: -1,\n    numAllin: 0,\n    numActive: 0,\n    lastAggressor: -1,\n    lastAggressorOfPrevRound: -1,\n    numBet: -1,\n    lastStraddler: -1,\n    canStraddle: false,\n    prev: undefined\n};\n\nfunction RootErrorBoundary() {\n    const [errorResolved, setErrorResolved] = useState(true);\n    return (\n        <ErrorBoundary FallbackComponent={ErrorFallback} onReset={() => {\n            setErrorResolved(false);\n        }}>\n            <App errorResolved={errorResolved} resolveError={() => setErrorResolved(true)}/>\n        </ErrorBoundary>\n    );\n}\n\nexport default RootErrorBoundary;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RootErrorBoundary from './RootErrorBoundary';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RootErrorBoundary />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}